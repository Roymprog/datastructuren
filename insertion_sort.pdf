%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R /F3 4 0 R /F4 6 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font
>>
endobj
5 0 obj
<<
/Contents 20 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 19 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
6 0 obj
<<
/BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font
>>
endobj
7 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://en.wikipedia.org/wiki/Insertion_sort)
>> /Border [ 0 0 0 ] /Rect [ 149.0529 387.0236 334.1229 399.0236 ] /Subtype /Link /Type /Annot
>>
endobj
8 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://www.gnu.org/software/libc/manual/html_node/Getopt.html)
>> /Border [ 0 0 0 ] /Rect [ 200.1829 369.0236 486.4129 381.0236 ] /Subtype /Link /Type /Annot
>>
endobj
9 0 obj
<<
/Annots [ 7 0 R 8 0 R ] /Contents 21 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 19 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
10 0 obj
<<
/Outlines 12 0 R /PageLabels 22 0 R /PageMode /UseNone /Pages 19 0 R /Type /Catalog
>>
endobj
11 0 obj
<<
/Author () /CreationDate (D:20181109175830+00'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20181109175830+00'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title (Assignment 2: mysort) /Trapped /False
>>
endobj
12 0 obj
<<
/Count 6 /First 13 0 R /Last 18 0 R /Type /Outlines
>>
endobj
13 0 obj
<<
/Dest [ 5 0 R /XYZ 62.69291 689.0236 0 ] /Next 14 0 R /Parent 12 0 R /Title (Objectives)
>>
endobj
14 0 obj
<<
/Dest [ 5 0 R /XYZ 62.69291 638.0236 0 ] /Next 15 0 R /Parent 12 0 R /Prev 13 0 R /Title (Requirements)
>>
endobj
15 0 obj
<<
/Dest [ 5 0 R /XYZ 62.69291 491.0236 0 ] /Next 16 0 R /Parent 12 0 R /Prev 14 0 R /Title (Getting started)
>>
endobj
16 0 obj
<<
/Dest [ 5 0 R /XYZ 62.69291 362.0236 0 ] /Next 17 0 R /Parent 12 0 R /Prev 15 0 R /Title (Testing)
>>
endobj
17 0 obj
<<
/Dest [ 5 0 R /XYZ 62.69291 233.0236 0 ] /Next 18 0 R /Parent 12 0 R /Prev 16 0 R /Title (Grading)
>>
endobj
18 0 obj
<<
/Dest [ 9 0 R /XYZ 62.69291 435.0236 0 ] /Parent 12 0 R /Prev 17 0 R /Title (See also)
>>
endobj
19 0 obj
<<
/Count 2 /Kids [ 5 0 R 9 0 R ] /Type /Pages
>>
endobj
20 0 obj
<<
/Length 8490
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 129.9249 0 Td (Assignment 2: mysort) Tj T* -129.9249 0 Td ET
Q
Q
q
1 0 0 1 62.69291 716.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 48.03937 0 Td (Date:) Tj T* -48.03937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (November 9th 2018) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 701.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.02937 0 Td (Deadline:) Tj T* -28.02937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (November 19th 2018 23:59) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 668.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Objectives) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 650.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You must implement a list API and a multi-tool number sorting program.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 617.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Requirements) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 599.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Your sorting program must be named ) Tj /F3 10 Tf 0 0 0 rg (mysort) Tj /F1 10 Tf 0 0 0 rg ( and its basic operation is as follows:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 593.0236 cm
Q
q
1 0 0 1 62.69291 593.0236 cm
Q
q
1 0 0 1 62.69291 581.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (it reads zero or more numbers from standard input;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 575.0236 cm
Q
q
1 0 0 1 62.69291 563.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (it prints the same numbers in sorted order on its standard output, one number per line.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 563.0236 cm
Q
q
1 0 0 1 62.69291 521.0236 cm
q
BT 1 0 0 1 0 26 Tm .534985 Tw 12 TL /F1 10 Tf 0 0 0 rg (Numbers in the input are separated by white space. You can assume that the input numbers themselves) Tj T* 0 Tw .187765 Tw (and their sum will fit into the integer type ) Tj /F3 10 Tf 0 0 0 rg (int) Tj /F1 10 Tf 0 0 0 rg (. Your program must perform sorting by maintaining a sorted) Tj T* 0 Tw (list in memory and maintaining this order while reading the input \(insertion sort\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 503.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (You must submit your work as a tarball. ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (tarball) Tj /F1 10 Tf 0 0 0 rg ( will create the correct tarball for you.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 470.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Getting started) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 458.0236 cm
Q
q
1 0 0 1 62.69291 458.0236 cm
Q
q
1 0 0 1 62.69291 446.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Unpack the provided source code archive; then run ) Tj /F3 10 Tf 0 0 0 rg (make) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 440.0236 cm
Q
q
1 0 0 1 62.69291 428.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Try out the generated ) Tj /F3 10 Tf 0 0 0 rg (mysort) Tj /F1 10 Tf 0 0 0 rg ( and familiarize yourself with its interface.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 422.0236 cm
Q
q
1 0 0 1 62.69291 410.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Read the file ) Tj /F3 10 Tf 0 0 0 rg (list.h) Tj /F1 10 Tf 0 0 0 rg ( and understand the interface.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 404.0236 cm
Q
q
1 0 0 1 62.69291 392.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Implement the data structure in ) Tj /F3 10 Tf 0 0 0 rg (list.c) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 386.0236 cm
Q
q
1 0 0 1 62.69291 374.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Implement the input and insertion sort algorithm in ) Tj /F3 10 Tf 0 0 0 rg (main.c) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 374.0236 cm
Q
q
1 0 0 1 62.69291 341.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Testing) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 275.0236 cm
q
BT 1 0 0 1 0 50 Tm .521098 Tw 12 TL /F1 10 Tf 0 0 0 rg (A small set of tests is provided for both the list data structure and the algorithm. The file ) Tj /F3 10 Tf 0 0 0 rg (check_list.c) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw .072485 Tw (contains a set of testcases for the data structure functions. The script ) Tj /F3 10 Tf 0 0 0 rg (check_sort.sh) Tj /F1 10 Tf 0 0 0 rg ( comes with a very) Tj T* 0 Tw -0.015013 Tw (basic set of tests for your sorting algorithm. To run these tests type ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (check) Tj /F1 10 Tf 0 0 0 rg (. This command first runs) Tj T* 0 Tw .733988 Tw (the data structure tests and if these all pass it runs the algorithm tests. If these pass it finally runs some) Tj T* 0 Tw (tests that check if a failing malloc call is handled correctly.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 245.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .166654 Tw (The test sets provided are not complete. Add your own tests to make sure that your implementation of the) Tj T* 0 Tw (data structure and the algorithm is correct.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 212.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Grading) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 194.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Your grade starts from 0, and the following tests determine your grade:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 188.0236 cm
Q
q
1 0 0 1 62.69291 188.0236 cm
Q
q
1 0 0 1 62.69291 176.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+0,5pt if you have submitted an archive in the right format.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 170.0236 cm
Q
q
1 0 0 1 62.69291 146.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.076235 Tw 12 TL /F1 10 Tf 0 0 0 rg (+0,5pt if your source code builds without errors and you have modified ) Tj /F3 10 Tf 0 0 0 rg (list.c) Tj /F1 10 Tf 0 0 0 rg ( or ) Tj /F3 10 Tf 0 0 0 rg (main.c) Tj /F1 10 Tf 0 0 0 rg ( in any) Tj T* 0 Tw (way.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 140.0236 cm
Q
q
1 0 0 1 62.69291 128.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+2pt if your list API processes insertions and removals properly.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 122.0236 cm
Q
q
1 0 0 1 62.69291 110.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+3pt if your ) Tj /F3 10 Tf 0 0 0 rg (mysort) Tj /F1 10 Tf 0 0 0 rg ( processes and sorts its input properly and terminates with exit code 0.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 104.0236 cm
Q
q
1 0 0 1 62.69291 92.02362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-0,5pt if your program misbehaves on zero-sized inputs.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 86.02362 cm
Q
 
endstream
endobj
21 0 obj
<<
/Length 6947
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-0,5pt if your program misbehaves when the last line does not terminate with a newline character.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 747.0236 cm
Q
q
1 0 0 1 62.69291 711.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .249269 Tw 12 TL /F1 10 Tf 0 0 0 rg (-1pt if ) Tj /F3 10 Tf 0 0 0 rg (valgrind) Tj /F1 10 Tf 0 0 0 rg ( reports errors while running your program. Valgrind and the address sanitizer don't) Tj T* 0 Tw 2.338651 Tw (play well together so to test your program with valgrind you run the commands ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (clean) Tj /F1 10 Tf 0 0 0 rg (,) Tj T* 0 Tw (followed by ) Tj /F3 10 Tf 0 0 0 rg (make valgrind) Tj /F1 10 Tf 0 0 0 rg ( to recompile your program without address sanitation.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 705.0236 cm
Q
q
1 0 0 1 62.69291 693.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (-1pt if ) Tj /F3 10 Tf 0 0 0 rg (clang) Tj ( ) Tj (-W) Tj ( ) Tj (-Wall) Tj /F1 10 Tf 0 0 0 rg ( reports warnings when compiling your code.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 693.0236 cm
Q
q
1 0 0 1 62.69291 663.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.365868 Tw (The following extra features will be tested to obtain higher grades, but only if you have obtained a) Tj T* 0 Tw (minimum of 5 points on the list above already:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 657.0236 cm
Q
q
1 0 0 1 62.69291 657.0236 cm
Q
q
1 0 0 1 62.69291 633.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .63061 Tw 12 TL /F1 10 Tf 0 0 0 rg (+0,5pt if your ) Tj /F3 10 Tf 0 0 0 rg (mysort) Tj /F1 10 Tf 0 0 0 rg ( accepts option ) Tj /F3 10 Tf 0 0 0 rg (-s) Tj /F1 10 Tf 0 0 0 rg ( taking a single argument, which causes it to only consider) Tj T* 0 Tw (input lines multiple of that number.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 627.0236 cm
Q
q
1 0 0 1 62.69291 603.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm -0.126484 Tw 12 TL /F1 10 Tf 0 0 0 rg (+0,5pt if your ) Tj /F3 10 Tf 0 0 0 rg (mysort) Tj /F1 10 Tf 0 0 0 rg ( accepts option ) Tj /F3 10 Tf 0 0 0 rg (-x) Tj /F1 10 Tf 0 0 0 rg ( taking a single argument, which causes it to ignore any input) Tj T* 0 Tw (line that are multiple of that number.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 597.0236 cm
Q
q
1 0 0 1 62.69291 573.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .70061 Tw 12 TL /F1 10 Tf 0 0 0 rg (+0,5pt if your ) Tj /F3 10 Tf 0 0 0 rg (mysort) Tj /F1 10 Tf 0 0 0 rg ( accepts option ) Tj /F3 10 Tf 0 0 0 rg (-3) Tj /F1 10 Tf 0 0 0 rg ( which causes it to replace all occurrences of the numbers) Tj T* 0 Tw (51, 69 and 42 by 666.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 567.0236 cm
Q
q
1 0 0 1 62.69291 555.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+1pt if your ) Tj /F3 10 Tf 0 0 0 rg (mysort) Tj /F1 10 Tf 0 0 0 rg ( accepts option ) Tj /F3 10 Tf 0 0 0 rg (-u) Tj /F1 10 Tf 0 0 0 rg ( which causes it to eliminate duplicate output lines.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 549.0236 cm
Q
q
1 0 0 1 62.69291 525.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .396457 Tw 12 TL /F1 10 Tf 0 0 0 rg (+0,5pt if your ) Tj /F3 10 Tf 0 0 0 rg (mysort) Tj /F1 10 Tf 0 0 0 rg ( accepts option ) Tj /F3 10 Tf 0 0 0 rg (-S) Tj /F1 10 Tf 0 0 0 rg ( which calculates the sum of all the items and appends that) Tj T* 0 Tw (to the end of the list.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 519.0236 cm
Q
q
1 0 0 1 62.69291 495.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.895984 Tw 12 TL /F1 10 Tf 0 0 0 rg (+0,5pt if your ) Tj /F3 10 Tf 0 0 0 rg (mysort) Tj /F1 10 Tf 0 0 0 rg ( accepts option ) Tj /F3 10 Tf 0 0 0 rg (-h) Tj /F1 10 Tf 0 0 0 rg ( taking a single positive number ) Tj /F4 10 Tf (N) Tj /F1 10 Tf ( as argument, which) Tj T* 0 Tw (causes it to stop after outputting the first ) Tj /F4 10 Tf (N) Tj /F1 10 Tf ( numbers of the sorted list.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 489.0236 cm
Q
q
1 0 0 1 62.69291 465.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.895984 Tw 12 TL /F1 10 Tf 0 0 0 rg (+0,5pt if your ) Tj /F3 10 Tf 0 0 0 rg (mysort) Tj /F1 10 Tf 0 0 0 rg ( accepts option ) Tj /F3 10 Tf 0 0 0 rg (-t) Tj /F1 10 Tf 0 0 0 rg ( taking a single positive number ) Tj /F4 10 Tf (N) Tj /F1 10 Tf ( as argument, which) Tj T* 0 Tw (makes the program output the last ) Tj /F4 10 Tf (N) Tj /F1 10 Tf ( numbers of the sorted list.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 465.0236 cm
Q
q
1 0 0 1 62.69291 447.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The flags must be applied to the input in the order that they are presented above.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 414.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (See also) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 402.0236 cm
Q
q
1 0 0 1 62.69291 402.0236 cm
Q
q
1 0 0 1 62.69291 390.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Insertion sort: ) Tj 0 0 .501961 rg (https://en.wikipedia.org/wiki/Insertion_sort) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 384.0236 cm
Q
q
1 0 0 1 62.69291 372.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Parsing program options: ) Tj 0 0 .501961 rg (https://www.gnu.org/software/libc/manual/html_node/Getopt.html) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 372.0236 cm
Q
 
endstream
endobj
22 0 obj
<<
/Nums [ 0 23 0 R 1 24 0 R ]
>>
endobj
23 0 obj
<<
/S /D /St 1
>>
endobj
24 0 obj
<<
/S /D /St 2
>>
endobj
xref
0 25
0000000000 65535 f 
0000000073 00000 n 
0000000134 00000 n 
0000000241 00000 n 
0000000353 00000 n 
0000000458 00000 n 
0000000663 00000 n 
0000000778 00000 n 
0000000974 00000 n 
0000001188 00000 n 
0000001417 00000 n 
0000001523 00000 n 
0000001801 00000 n 
0000001875 00000 n 
0000001986 00000 n 
0000002112 00000 n 
0000002241 00000 n 
0000002362 00000 n 
0000002483 00000 n 
0000002592 00000 n 
0000002658 00000 n 
0000011200 00000 n 
0000018199 00000 n 
0000018249 00000 n 
0000018283 00000 n 
trailer
<<
/ID 
[<a0f8839099dd7dd9c6cd1a446dd124eb><a0f8839099dd7dd9c6cd1a446dd124eb>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 11 0 R
/Root 10 0 R
/Size 25
>>
startxref
18317
%%EOF
